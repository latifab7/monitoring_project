default:      
  image:
    name: hashicorp/terraform
    entrypoint : [""]        
  cache:    
    - key: $CI_PIPELINE_ID-terraform-cache-file 
      paths: 
        - ./terraform/.terraform/
        - ./terraform/.terraform.lock.hcl 

# global variables
variables:            
    AWS_ACCES_KEY : ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_KEY : ${AWS_SECRET_ACCESS_KEY}
    ANSIBLE_HOST_KEY_CHECKING : "False"  # bypass verification hosts

stages:
  - deploy-infrastructure
  - configure-instances
  - destroy-infra


terraform_init:
  stage: deploy-infrastructure
  before_script:
    - cd ./terraform/
  script:
    - terraform init 


terraform_validate:
  stage: deploy-infrastructure
  before_script:
    - cd ./terraform/
  script:
    - terraform validate


terraform_apply: 
  stage: deploy-infrastructure
  before_script:
    - cd ./terraform/
  script:
    - terraform apply -auto-approve
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_ID}"
    paths:
      - ../ansible/hosts  #get the host file for our ansible deployment job
 

test_instance:
  needs: 
    - terraform_apply
  image: 
    name: alpinelinux/ansible 
    entrypoint: [""]
  stage: configure-instances
  before_script:
    - cd ./ansible/
  script:
    - eval $(ssh-agent -s) #run agent to access to load ssh
    - chmod 400 "$SSH_PRIVATE_KEY"  
    - ssh-add "$SSH_PRIVATE_KEY" 
    - mkdir -p ~/.ssh
    - chmod 400 ~/.ssh 
    - ansible-playbook -i hosts ./playbooks/test_instance.yml
  dependencies:
    - terraform_apply
  variables: 
    EMAIL : "$EMAIL"
  cache: []
  when: manual
  allow_failure: true 



monitoring:
  needs: 
    - terraform_apply
  image: 
    name: alpinelinux/ansible 
    entrypoint: [""]
  stage: configure-instances
  before_script:
    - cd ./ansible/
  script:
    - eval $(ssh-agent -s) #run agent to access to load ssh
    - chmod 400 "$SSH_PRIVATE_KEY"  
    - ssh-add "$SSH_PRIVATE_KEY" 
    - mkdir -p ~/.ssh
    - chmod 400 ~/.ssh 
    - ansible-playbook -i hosts ./playbooks/monitoring.yml
  dependencies:
    - terraform_apply
  variables: 
    EMAIL : "$EMAIL"
    MONITOR_DNS : "$MONITOR_DOMAIN_NAME"
  cache: []
  when: manual
  allow_failure: true 



terraform_destroy: 
  when: manual
  stage: destroy-infra
  before_script:
    - cd ./terraform/
  script:
    - terraform destroy -auto-approve 




